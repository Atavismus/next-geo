@tailwind base;
@tailwind components;
@tailwind utilities;

$blue: rgb(37, 99, 235);
$green: rgb(22, 163, 74);
$red: rgb(220, 38, 38);
$white: #f2f2f2;

body {
  background: url("/bricks.png") repeat;
  padding-bottom: 5%;
  // font-family: "Permanent Marker", cursive!important;
  font-family: cursive!important;
}

.small-caps {
  font-variant: small-caps;
}

#whiteboard {
  background-color: $white;
  width: 90%;
  height: 90%;
  margin: auto;
  margin-top: 5%;
  border-radius: 5px;
  border: 10px solid #adb2bd;
  box-shadow: inset -1px 2px 2px #404040, 6px 9px 1px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  position: relative;
}

#homesweethome:hover path {
  fill: $blue;  
}

/*List icon*/
#listIcon {
  padding-left: 11px;
  span {
    display: block;
    width: 40px;
    height: 3px;
    background: #000000;
    margin-bottom: 10px;
    transform: rotate(2deg);
    border-top-left-radius: 95%;
    border-top-right-radius: 85%;
    border-bottom-left-radius: 80%;
    border-bottom-right-radius: 90%;
    &:nth-of-type(2) {
      transform: rotate(-2deg);
    }
    &:nth-of-type(3) {
      transform: rotate(1deg);
    }
    
    &:nth-of-type(4) {
      transform: rotate(-2deg);
    }
    &:before {
      content: "";
      display: block;
      position: absolute;
      width: 5px;
      height: 5px;
      background: inherit;
      border-radius: 100%;
      margin-top: -1px;
      margin-left: -11px;
    }
  }
  &:hover span {
    background: $blue;  
  }
}

#listIcon span:nth-of-type(2):before {
  height: 6px;
  border-top-left-radius: 35%;
  border-top-right-radius: 57%;
  border-bottom-left-radius: 70%;
  border-bottom-right-radius: 60%;
  margin-left: -10px;
}

#listIcon span:nth-of-type(3):before {
  border-top-left-radius: 90%;
  border-top-right-radius: 80%;
  border-bottom-left-radius: 80%;
  border-bottom-right-radius: 90%;
}

#listIcon span:nth-of-type(4):before {
  border-top-left-radius: 75%;
  border-top-right-radius: 75%;
  border-bottom-left-radius: 70%;
  border-bottom-right-radius: 70%;
  margin-left: -11px;
}

table.list {
  tr {
    border-color: lightgrey;
  }
  th, td {
    padding: 10px;
    border-color: lightgrey;
  }
}

#geo {
  position: relative;
}

#geo.crossed:before {
  content: "";
  display: block;
  position: absolute;
  top: 50%;
  left: -10%;
  width: 120%;
  height: 5px;
  background-color: $red;
  transform: rotate(175deg);
  border-top-left-radius: 55%;
  border-top-right-radius: 85%;
  border-bottom-left-radius: 79%;
  border-bottom-right-radius: 66%;
}

.game {
  border-top-left-radius: 70%;
  border-top-right-radius: 85%;
  border-bottom-left-radius: 75%;
  border-bottom-right-radius: 60%;
  transform: rotate(-5deg);
}

.game:nth-of-type(2) {
  border-top-left-radius: 85%;
  border-top-right-radius: 70%;
  border-bottom-left-radius: 60%;
  border-bottom-right-radius: 75%;
  transform: rotate(3deg);  
}
.game:nth-of-type(3) {
  border-top-left-radius: 75%;
  border-top-right-radius: 60%;
  border-bottom-left-radius: 70%;
  border-bottom-right-radius: 85%;
  transform: rotate(5deg);  
}
.game:nth-of-type(4) {
  border-top-left-radius: 69%;
  border-top-right-radius: 63%;
  border-bottom-left-radius: 80%;
  border-bottom-right-radius: 88%;
  transform: rotate(-3deg);  
}
.game:nth-of-type(5) {
  border-top-left-radius: 79%;
  border-top-right-radius: 59%;
  border-bottom-left-radius: 70%;
  border-bottom-right-radius: 98%;
  transform: rotate(-4deg);  
}
.game:nth-of-type(6) {
  border-top-left-radius: 69%;
  border-top-right-radius: 89%;
  border-bottom-left-radius: 60%;
  border-bottom-right-radius: 88%;
  transform: rotate(-2deg);  
}

/*Location icon*/
.location {
    &:hover {
      filter: brightness(80%)  
    }
    path {
    fill: $blue;
  }
}

/*Choices are text*/
.choiceText:hover label, .choiceText .radio-fake:checked + label {
  color: #ffffff;
  background: $blue;
}

.choiceText:hover label {
  filter: brightness(1.3);  
}

.choiceText .radio-fake:checked + label {
  filter: unset; 
}

.right .choiceText .radio-fake:checked + label {
  background: $green;
  border-color: $green;
}
.wrong .choiceText .radio-fake:checked + label {
  background: $red;
  border-color: $red;
}

#submitBtn[disabled], #submitBtn[disabled]:hover {
  filter: grayscale(1);
  cursor: not-allowed;
}

@keyframes animToRight {
  100%  {color: $green;}
}

@keyframes animToWrong {
  100%  {color: $red;}
}

@keyframes resetFromRight {
  0%  {color: $green;}
  100%  {color: #000000;}
}

@keyframes resetFromWrong {
  0%  {color: $red;}
  100%  {color: #000000;}
}

/*Choices are flags*/
.check {
  margin-left: -55px;
  animation-delay: 350ms!important;
  animation-fill-mode: forwards;
}

.choiceFlag:hover .check, .choiceFlag .radio-fake:checked + label > svg {
  display: block;
}

@keyframes ping {
  75%, 100% {
    transform: scale(1.5);
    opacity: 0;
  }
}
.choiceFlag .radio-fake:checked + label > .check path {
  stroke: rgb(37 99 235);
}

.right .check {
  animation: ping 1.5s cubic-bezier(0, 0, 0.2, 1);
  path {
    stroke: rgb(22 163 74)!important;
  }
}
.wrong .check {
  animation: ping 1.5s cubic-bezier(0, 0, 0.2, 1);
  path {
    stroke: rgb(220 38 38)!important;    
  }
}

/*Scoring*/
#score, #bestScore {
  animation-fill-mode: forwards!important;  
}

#score.animToRight, #bestScore.animToRight {
  animation: animToRight 1000ms;
}

#score.animToWrong, #bestScore.animToWrong {
  animation: animToWrong 1000ms;
}

#score.resetFromRight, #bestScore.resetFromRight {
  animation: resetFromRight 1000ms;
}

#score.resetFromWrong, #bestScore.resetFromWrong {
  animation: resetFromWrong 1000ms;
}
